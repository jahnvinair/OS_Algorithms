#include <stdio.h>

#define MAX_PROCESS 10

void round_robin(int processes[], int arrival_time[], int burst_time[], int n, int time_quantum) {
    int remaining_time[MAX_PROCESS];
    int completion_time[MAX_PROCESS];
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
        completion_time[i] = 0;
    }

    while (1) {
        int all_processes_completed = 1;

        for (int i = 0; i < n; i++) {
            if (remaining_time[i] > 0) {
                all_processes_completed = 0;
                if (remaining_time[i] > time_quantum) {
                    current_time += time_quantum;
                    remaining_time[i] -= time_quantum;
                } else {
                    current_time += remaining_time[i];
                    completion_time[i] = current_time;
                    remaining_time[i] = 0;
                }
            }
        }

        if (all_processes_completed)
            break;
    }

    // Calculate turnaround time and wait time
    int total_turnaround_time = 0, total_wait_time = 0;
    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWait Time\n");
    for (int i = 0; i < n; i++) {
        int turnaround_time = completion_time[i] - arrival_time[i];
        int wait_time = turnaround_time - burst_time[i];
        total_turnaround_time += turnaround_time;
        total_wait_time += wait_time;
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", processes[i], arrival_time[i], burst_time[i], completion_time[i], turnaround_time, wait_time);
    }

    // Calculate and display average turnaround time and average wait time
    float avg_turnaround_time = (float)total_turnaround_time / n;
    float avg_wait_time = (float)total_wait_time / n;
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Wait Time: %.2f\n", avg_wait_time);
}

int main() {
    int n, time_quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int processes[MAX_PROCESS];
    int arrival_time[MAX_PROCESS];
    int burst_time[MAX_PROCESS];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d Arrival Time: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Process %d Burst Time: ", i + 1);
        scanf("%d", &burst_time[i]);
        processes[i] = i + 1; // Process IDs
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &time_quantum);

    round_robin(processes, arrival_time, burst_time, n, time_quantum);

    return 0;
}
